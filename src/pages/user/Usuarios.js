import React, { useState, useEffect } from 'react'; 
import 'bootstrap/dist/css/bootstrap.min.css';
import { Link } from 'react-router-dom'; 
import '../../css/user/Usuarios.css';
import CustomNavbar from '../../components/CustomNavbar';
import {host} from '../../conexion';

function Usuarios() {
/* These lines of code are utilizing the `useState` hook in React to manage state in a functional
component called `Usuarios`. Here's a breakdown of each line: */
    const [datosUsuarios, setDatosUsuarios] = useState([]);
    const [selectedId, setSelectedId] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');

    /* The `useEffect` hook in the provided code snippet is responsible for fetching data from the API
endpoint `usuario` when the component `Usuarios` mounts for the first time. Here's a
breakdown of what it's doing: */

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await fetch(`${host}usuario`);
                const data = await response.json();
                // Mapear los datos para ajustar el formato de 'estado' y 'permisos'
                const usuariosConValoresString = data.map(usuario => ({
                    ...usuario,
                    estado: usuario.estado === '0' ? 'Inactivo' : 'Activo',
                    permisos: usuario.permisos === '0' ? 'Director de Transparencia' : 
                               usuario.permisos === '1' ? 'Administrador' :
                               usuario.permisos === '2' ? 'Director de Área' : ''
                }));                
                setDatosUsuarios(usuariosConValoresString);
            } catch (error) {
                console.error('Error al obtener los datos:', error);
            }
        };
    
        fetchData();
    }, []);
    
    /**
    The function `handleRowClick` checks if a row is already selected and either selects it or does
    nothing based on the condition.
    @param id_usuario - The `id_usuario` parameter in the `handleRowClick` function represents the
    unique identifier of the user associated with the row that was clicked. This identifier is used
    to determine which row was clicked and perform actions accordingly, such as selecting or
    deselecting the row.
    @returns If the `selectedId` is equal to `id_usuario`, then `return` is being called to exit the
    function early and no further code will be executed.
     */
    
    const handleRowClick = (id_usuario) => {
        if (selectedId === id_usuario) {
            return;
        } else {
            setSelectedId(id_usuario);
            console.log("ID del usuario seleccionado:", id_usuario);
        }
    };
    
    /**
    The `handleDelete` function confirms the deletion of a selected user, sends a DELETE request to
    the server, updates the user list, and clears the selection.
     */
    const handleDelete = () => {
        if (selectedId) {
            const confirmDelete = window.confirm('¿Seguro que deseas eliminar este usuario?');
            if (confirmDelete) {
                fetch(`${host}usuario/borrar/${selectedId}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error al eliminar el usuario');
                    }
                    return response.json();
                })
                .then(data => {
                    const updatedUsuarios = datosUsuarios.filter(usuario => usuario.id !== selectedId);
                    setDatosUsuarios(updatedUsuarios);
                    setSelectedId(null);
                    alert('Usuario eliminado exitosamente.');
                })
                .catch(error => {
                    console.error('Error al eliminar el usuario:', error);
                });
            }
        } else {
            alert('Por favor, selecciona un usuario para eliminar.');
        }

    };
    
    
    /**
    The function `handleSearch` updates the search term and filters user data based on the search
    term for areas, names, permissions, and states.
    @param event - The `event` parameter in the `handleSearch` function is an event object that is
    passed when the `handleSearch` function is called. In this case, it is likely an event object
    generated by a user interaction, such as typing in an input field. The `event.target.value` is
     */
    const handleSearch = (event) => {
        setSearchTerm(event.target.value);
    };
    
    const filteredData = searchTerm 
    ? datosUsuarios.filter(usuario => 
        usuario.area?.toString().toLowerCase().includes(searchTerm.toLowerCase()) ||
        usuario.nombre?.toString().toLowerCase().includes(searchTerm.toLowerCase()) ||
        usuario.permisos?.toString().toLowerCase().includes(searchTerm.toLowerCase()) ||  // Asegúrate de utilizar 'permisos' en lugar de 'rol'
        usuario.estado?.toString().toLowerCase().includes(searchTerm.toLowerCase())
    ) 
    : datosUsuarios;

    /* The above code is a JSX component written in JavaScript for a web application. It appears to be
    a user interface for managing a list of users. Here is a breakdown of what the code is doing: */
    return (
        <div className="app">
            <CustomNavbar />
            <div className="acontainer">
                <div className="container d-flex justify-content-between align-items-center">
                    <h1 className="fs-1"><b>Usuarios</b></h1>
                    <div className="d-flex align-items-center">
                        <div className="input-group rounded-pill border border-1 me-2 custom-border">
                            <input
                                type="search"
                                className="form-control rounded-pill border border-2 text-center custom-border"
                                placeholder="Buscar..."
                                aria-label="Buscar"
                                aria-describedby="search-addon"
                                style={{ color: "#04703F"}}
                                onChange={handleSearch}
                            />
                        </div>
                        <Link to="/usuarios/insertar" className="link-dark text-decoration-none px-2">
                            <svg xmlns="http://www.w3.org/2000/svg" width="54" height="54" fill="#04703F" className="bi bi-plus-circle" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                            </svg>
                        </Link>
                        <Link to={selectedId ? `/usuarios/actualizar?id_usuario=${selectedId}` : '#'} className="link-dark text-decoration-none px-2">
                            <svg xmlns="http://www.w3.org/2000/svg" width="54" height="54" fill="#04703F" className="bi bi-pencil-square" viewBox="0 0 16 16">
                                <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293z" />
                                <path d="M13.752 4.396l-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                <path fillRule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z" />
                            </svg>
                        </Link>
                        <button type="button" className="text-decoration-none px-2" style={{backgroundColor: "white", border:"none"}} onClick={handleDelete}>
                            <svg xmlns="http://www.w3.org/2000/svg" width="54" height="54" fill="#04703F" className="bi bi-trash" viewBox="0 0 16 16">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                            </svg>
                        </button>

                    </div>
                </div>
            </div>
            <div id="tabla-container" className="px-4 py-4" style={{ marginTop: "200px" }}>
                <table className="table table-hover" style={{ borderCollapse: "separate", borderSpacing: "0 8px" }}>
                    <thead>
                        <tr style={{ borderBottom: "2px solid #04703F" }}>
                            <th scope="col" className="fs-3" style={{ backgroundColor: "#FDFBF6", borderBottom: "none", color: "#04703F" }}>Area</th>
                            <th scope="col" className="fs-3" style={{ backgroundColor: "#FDFBF6", borderBottom: "none", color: "#04703F" }}>Nombre</th>
                            <th scope="col" className="fs-3" style={{ backgroundColor: "#FDFBF6", borderBottom: "none", color: "#04703F" }}>Estado</th>
                            <th scope="col" className="fs-3" style={{ backgroundColor: "#FDFBF6", borderBottom: "none", color: "#04703F" }}>Rol</th>
                            
                        </tr>
                    </thead>
                    <tbody>
                        {filteredData.map((usuario) => (
                        <tr
                            key={usuario.id}
                            onClick={() => handleRowClick(usuario.id)}
                            className={selectedId === usuario.id ? 'selected' : ''}
                            style={{  cursor: "pointer" }}
                        >
                            <td className='fs-4' style={{ borderBottom: "2px solid #04703F", color: "#04703F"}}>{usuario.area}</td>
                            <td className='fs-4' style={{ borderBottom: "2px solid #04703F", color: "#04703F"}}>{usuario.nombre}</td>
                            <td className='fs-4' style={{ borderBottom: "2px solid #04703F", color: "#04703F"}}>{usuario.estado}</td>
                            <td className='fs-4' style={{ borderBottom: "2px solid #04703F", color: "#04703F"}}>{usuario.permisos}</td>
                        </tr>
                    ))}

                    </tbody>
                </table>
            </div>

        </div>
    );
}

export default Usuarios;
